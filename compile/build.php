#!/bin/env php
<?php
/**
 * 
 * AXELS PHP COMPILE SCRIPT
 * 
 * Generate an executable binary for a target platform.
 * The binary runs without PHP on the target.
 * 
 */

// ----------------------------------------------------------------------
// CONFIG
// ----------------------------------------------------------------------

require "config.php";
require("inc_vars.php");
require("inc_functions.php");

$INFILE="$approot/$aCompileConfig[main]";
$MERGED_PHPAPP="$approot/$dirPackages/".str_replace('.php', '', basename($INFILE))."-merged-app.php";
$MERGED_INCLUDES="$approot/$dirBuild/".str_replace('.php', '', basename($INFILE))."-included.php";

$OUTFILE="$approot/$dirPackages/".str_replace('.php', '', basename($INFILE)).$myosextension;
$OUTFILE2="$approot/$dirPackages/".str_replace('.php', '', basename($INFILE)).'_'.$myos.'_'.$myarchitecture.$myosextension;

$FLAG_FORCEBUILD=false;
$FLAG_FULLTEST=false;


// ----------------------------------------------------------------------
// MAIN
// ----------------------------------------------------------------------

echo "
  \e[1m$PHP_APP\e[0m

  B U I L D E R

...............................................................................
";

if ($argc > 1) {
    parse_str(implode('&', array_slice($argv, 1)), $ARGS);
}

if(isset($ARGS['-h']) || isset($ARGS['--help'])){
    echo "
    - Merge PHP sources to a single file
    - Compile binary
    - Test binary
    - Copy to architecture specific binary
    - Create readme with buildinfos

...............................................................................

 âœ¨ \e[1mSYNTAX:\e[0m

    ./build.php [OPTIONS]

 ðŸ”· \e[1mOPTIONS:\e[0m

    -h, --help     Show this help
    -f, --force    Force rebuild on unchanged sources
    -t, --test     Run full test suite: ./tests/00_start.php
                   without '-t': run a  single check only.

";
    exit(0);
}

if(isset($ARGS['-f']) || isset($ARGS['--force'])){
    $FLAG_FORCEBUILD=true;
}
if(isset($ARGS['-t']) || isset($ARGS['--test'])){
    $FLAG_FULLTEST=true;
}

_h1("Configuration");
print_r($aCompileConfig);

_h1("Startup");
_chdir($approot);
_mkdir($dirPackages);

// ----------------------------------------------------------------------

_h1("Check target file");
if(file_exists($OUTFILE)){
    $ts_in=filemtime($INFILE);
    $ts_out=filemtime($OUTFILE);
    if($ts_in>$ts_out){
        echo "âœ… INFO: Source file \"$INFILE\" is newer than \"$OUTFILE\". Compiling changes...\n";
    } else {
        if($FLAG_FORCEBUILD){
            echo "ðŸ”¹ INFO: Source is unchanged since last build... rebuilding it because of --force param.\n";
        } else{
            echo "Source is unchanged since last build. \n   Delete \"$OUTFILE\"\n   or use --force to force a rebuild.\n";
            _abort("Aborting.");
        }
    }
} else {
    echo "âœ… INFO: Target \"$OUTFILE\" does not exist yet.\n";
}

// ----------------------------------------------------------------------

_h1("Merge included files");

$out="<?php

/*
    This file was generated by 
    ".__FILE__." 
    at ".(date("Y-m-d H:i:s"))."

    merged files:
    ".implode("\n    ", $aCompileConfig['merge'])."

*/
";

foreach($aCompileConfig['merge'] as $sMyFile){
    echo "- adding $sMyFile\n";
    $sSource=file_get_contents($sMyFile);
    $sSource=preg_replace(
        [
            "/include 'validateparam.settings.php';/",
            "/(require[\ \_].*;)/",
            "/(\<\?php)/"
        ], 
        [
            "// REMOVED-BY-MERGER: $1",
            "",
        ], 
        $sSource
    );
    $out.="$sSource\n";
}


if(file_put_contents($MERGED_INCLUDES, $out)){
    _ok("$MERGED_INCLUDES was written");
} 

_exec("php -l \"$MERGED_INCLUDES\"");

// ----------------------------------------------------------------------

_h1("Prepare source");
$sBuildDate=date("Y-m-d H:i:s");
$sBuildPhpcode="\$BUILD_DATE=\"$sBuildDate\";";
$datefile=str_replace('.php', '__build.php', $INFILE);
file_put_contents(
    $datefile, "<?php
        // This file was generated by ".__FILE__."
        $sBuildPhpcode"
);
$in=file_get_contents($INFILE);
$inccode=$sBuildPhpcode . "\n". file_get_contents($MERGED_INCLUDES);
$inccode=str_replace("<?php", "", $inccode);

$tempcode=preg_replace("#\/\/ ---MARK---INCLUDE-CHECKS---START---.*---MARK---INCLUDE-CHECKS---END#s", "$inccode", $in);

// echo "$tempcode";
if(file_put_contents($MERGED_PHPAPP, $tempcode)){
    _ok("$MERGED_PHPAPP was written");
}
_exec("php -l \"$MERGED_PHPAPP\"");
_exec("chmod +x $MERGED_PHPAPP");

// ----------------------------------------------------------------------

_h1("Compile");
_chdir("$approot/$dirBuild");
_exec("$SPC \
    micro:combine \
    \"$MERGED_PHPAPP\" \
    -O \"$OUTFILE\"");

// if(unlink($MERGED_PHPAPP)){
//     echo "Cleanup: $MERGED_PHPAPP was deleted\n";
// }

// ----------------------------------------------------------------------

_h1("Test generated binary");

_exec("file \"$OUTFILE\"");
_exec("\"$OUTFILE\" -h ");

_h1("Write architecture specific binary");
if(!copy($OUTFILE, $OUTFILE2)){
    _abort("Could not copy $OUTFILE to $OUTFILE2");
}
_ok("file created: '$OUTFILE2'");
_exec("chmod +x $OUTFILE2");

_h1("Create readme");
$readme="{$OUTFILE2}__README.md";
$versionSPC=system("$SPC --version");

$versionBuiltBin=system("php $INFILE --version");

if (!file_put_contents($readme, 
    "# Build infos $versionBuiltBin

Date        : $sBuildDate

OS          : $myos
architecture: $myarchitecture

File        : ".basename($OUTFILE2)."

## Versions

Used SPC    : $versionSPC
PHP version : $php_version
PHP modules : $PHP_LIBS

## Conmands

Download    : `$cmdSpcDownload`

Build       : `$cmdSpcBuild`

")){
    _abort("Could not write $readme");
}
_ok("file created.");


// ----------------------------------------------------------------------
@include "build_postactions.php";

_h1("Summary");
echo "The created files are:

Merged php file:
- $MERGED_PHPAPP

Compiled binay:
- $OUTFILE
- $OUTFILE2
- $readme
";

_h1("Build was successful.");

// ----------------------------------------------------------------------
