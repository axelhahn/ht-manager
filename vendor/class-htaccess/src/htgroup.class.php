<?php

namespace axelhahn;

/**
 * ======================================================================
 * 
 * PHP class to handle htgroup file
 * 
 * This class can can handle .htgoups files:
 * - add groups
 * - rename
 * - delete groups
 * - list all groups or members
 * ... and memberships
 * - userAdd
 * - userRemove
 * 
 * @author www.axel-hahn.de
 * @license GNU Public License 3.0
 * @source https://github.com/axelhahn/php-htpasswd/
 * 
 * ----------------------------------------------------------------------
 * 2025-07-19  initial version
 * 2025-07-21  v1.0  add flag nn list()
 * 2025-07-23  v1.1  update phpdoc
 * 2025-07-24  v1.2  add method getFile()
 * 2025-07-25  v1.3  fix readFile(); sort groups before saving
 * 2025-08-08  v1.4  add a comment in 1st line; ignore lines starting with # or ;
 * 2025-08-08  v1.5  add error() method to get the last error
 * ======================================================================
 */
class htgroup
{

    // ----------------------------------------------------------------------
    // vars
    // ----------------------------------------------------------------------

    /**
     * Full path of htgroup file
     * @var string
     */
    protected string $sHtGroupFile = '';

    /**
     * Last error
     * @var string
     */
    protected string $sLastError = '';

    /**
     * Groups as array with the keys "groupname" and list of users as value
     * @var array
     */
    protected array $aGroups = [];

    /**
     * Flag: show debug infos?
     * @var bool
     */
    protected bool $bDebug = false;

    // ----------------------------------------------------------------------
    // constructor
    // ----------------------------------------------------------------------


    /**
     * Constructor
     * @param string $sHtGroupFile  optional: full path of htgroup file
     */
    public function __construct(string $sHtGroupFile = '')
    {
        if ($sHtGroupFile) {
            $this->setFile($sHtGroupFile);
        }
    }
    // ----------------------------------------------------------------------
    // methods
    // ----------------------------------------------------------------------

    /**
     * Write debug info; only if debugging was activated
     * 
     * @see debug()
     * 
     * @param string $sMessage
     * @return void
     */
    protected function _wd(string $sMessage): void
    {
        if ($this->bDebug) {
            echo "DEBUG: $sMessage" . PHP_EOL;
        }
    }

    /**
     * Write debug info on error and store last error message
     * 
     * @see debug()
     * 
     * @param string $sMessage
     * @return void
     */
    protected function _error(string $sMessage): void
    {
        $this->_wd("ERROR $sMessage");
        $this->sLastError = $sMessage;
    }

    /**
     * Enable or disable debug mode
     * 
     * @param bool $bDebug  new value of debug flag
     * @return void
     */
    public function debug(bool $bDebug): void
    {
        $this->bDebug = $bDebug;
    }

    /**
     * Get the last error
     * 
     * @return string
     */
    public function error(): string
    {
        return $this->sLastError;
    }

    // ----------------------------------------------------------------------
    // file methods
    // ----------------------------------------------------------------------

    /**
     * Read htgroup file and parse group data.
     * file data are put in local array
     * 
     * @return void
     */
    protected function _readFile(): void
    {
        $this->_wd(__METHOD__ . "()");
        $this->aGroups = [];
        if (file_exists($this->sHtGroupFile)) {
            $this->_wd(__METHOD__ . ": file '$this->sHtGroupFile' exists - reading it");
            foreach (file($this->sHtGroupFile)??[] as $line) {
                $line = trim($line);
                if(preg_match('/^[#;]/', $line)) {
                    continue;   
                }
                $aTmp = explode(":", $line);
                if(count($aTmp) > 1) {                    
                    $aUsers = array_filter(explode(' ', $aTmp[1]));
                    $this->aGroups[$aTmp[0]] = $aUsers;
                }
            }
            ;
            $this->_wd(__METHOD__ . ": found " . count($this->aGroups) . " group(s).");
        } else {
            $this->_wd(__METHOD__ . ": file '$this->sHtGroupFile' does not exist yet.");
        }
    }

    /**
     * Generate content for full htgroup file
     * This method is used internally in the _saveFile() method.
     * You can use this to render a preview of the generated file.
     * 
     * @return string
     */
    public function generateContent(): string
    {
        $this->_wd(__METHOD__ . "()");
        $sContent = "# generated by ".__FILE__."\n# last change: " . date("Y-m-d H:i:s") . "\n";
        $this->_wd(__METHOD__ . ": Groups: " . count($this->aGroups));
        ksort($this->aGroups);
        foreach ($this->aGroups as $sGroup => $aItem) {
            $sContent .= $sGroup . ": " . implode(" ", $aItem) . "\n";
        }
        return $sContent;
    }

    /**
     * Save htgroup file. It returns true if successful
     * @return bool
     */
    protected function _saveFile(): bool
    {
        $this->_wd(__METHOD__ . "()");
        if(file_put_contents($this->sHtGroupFile, $this->generateContent())){
            return true;
        } else {
            $this->_error(__METHOD__ . ": file '$this->sHtGroupFile' cannot be written.");
            return false;
        }
    }

    /**
     * Set full path of htgroup file. If it exists its groups will be parsed.
     * 
     * @param string $sHtGroupFile  optional: full path of htgroup file
     * @return void
     */
    public function setFile(string $sHtGroupFile): void
    {
        $this->_wd(__METHOD__ . "(file '$sHtGroupFile')");
        if ($sHtGroupFile !== $this->sHtGroupFile) {
            $this->_wd(__METHOD__ . ": This is the same file that was already set. Reloading it.");
        }
        $this->sHtGroupFile = $sHtGroupFile;
        $this->_readFile();
    }

    /**
     * Get current htgroup file
     * @return string
     */
    public function getFile(): string
    {
        return $this->sHtGroupFile;
    }

    // ----------------------------------------------------------------------
    // group methods
    // ----------------------------------------------------------------------

    /**
     * Check if a given group exists
     * @param string $sGroup  groupname
     * @return bool
     */
    protected function _groupExists(string $sGroup): bool
    {
        $this->_wd(__METHOD__ . "(group '$sGroup')");
        return isset($this->aGroups[$sGroup]);
    }

    /**
     * Add a new group in htgroup file.
     * It returns true if successful.
     * It returns false
     * - if group already exists
     * - writing .htgroup file failed
     * 
     * @param string $sGroup      group name to add
     * @return bool
     */
    public function add(string $sGroup): bool
    {
        $this->_wd(__METHOD__ . "(group '$sGroup')");
        if ($this->_groupExists($sGroup)) {
            $this->_error(__METHOD__ . ": Cannot add group '$sGroup', group already exists");
            return false;
        }

        $this->_wd(__METHOD__ . ": Adding group ...");
        $this->aGroups[$sGroup] = [];
        return $this->_saveFile();
    }

    /**
     * Check if a given group name exists
     * It returns true if successful.
     * It returns false if the group does not exist.
     * 
     * @param string $sGroup      groupname to search for
     * @return bool
     */
    public function exists(string $sGroup): bool
    {
        $this->_wd(__METHOD__ . "(group '$sGroup')");
        return $this->_groupExists($sGroup);
    }

    /**
     * List all groups as array.
     * with setting flag to show groupmembers you get an array
     * with <group> as key and value is an array of groupmembers
     * 
     * @param bool $sShowMembers  optional: show groupmembers; default: false
     * @return array
     */
    public function list(bool $sShowMembers = false): array
    {
        $this->_wd(__METHOD__ . "()");
        return $sShowMembers ? $this->aGroups : array_keys($this->aGroups);
    }

    /**
     * List members of a given existing group
     * it returns
     * - an array of groupmembers if successful
     * - false if group doesn't exist
     * 
     * @param string $sGroup      groupname
     * @return bool|array
     */
    public function members(string $sGroup): bool|array
    {
        $this->_wd(__METHOD__ . "(group '$sGroup')");
        if (!$this->_groupExists($sGroup)) {
            $this->_error(__METHOD__ . ": Cannot show members of group '$sGroup', group doesn't exist.");
            return false;
        }

        $this->_wd(__METHOD__ . ": Returning " . count($this->aGroups[$sGroup]) . " member(s) ...");
        return $this->aGroups[$sGroup];
    }

    /**
     * Remove an existing group
     * It returns true if successful.
     * It returns false
     * - if group doesn't exist
     * - writing .htgroup file failed
     * 
     * @param string $sGroup      groupname to remove
     * @return bool
     */
    public function remove(string $sGroup): bool
    {
        $this->_wd(__METHOD__ . "(group '$sGroup')");
        if (!$this->_groupExists($sGroup)) {
            $this->_error(__METHOD__ . ": Cannot remove group '$sGroup' - it does not exist.");
            return false;
        }

        unset($this->aGroups[$sGroup]);
        return $this->_saveFile();
    }

    /**
     * Rename a group
     * It returns true if successful.
     * It returns false
     * - if group doesn't exist
     * - writing .htgroup file failed
     * 
     * @param string $sGroup        groupname to update
     * @param string $sNewGroup     new groupname
     * @return bool
     */
    public function rename(string $sGroup, string $sNewGroup): bool
    {
        $this->_wd(__METHOD__ . "(group '$sGroup', new group '$sNewGroup')");
        if (!$this->_groupExists($sGroup)) {
            $this->_error(__METHOD__ . ": Cannot update password for '$sGroup', group does not exist.");
            return false;
        }
        $this->aGroups[$sNewGroup] = $this->aGroups[$sGroup];
        unset($this->aGroups[$sGroup]);
        return $this->_saveFile();
    }

    // ----------------------------------------------------------------------
    // user methods
    // ----------------------------------------------------------------------

    /**
     * Add a user to an existing group
     * It returns true if successful.
     * It returns false
     * - if group doesn't exist
     * - writing .htgroup file failed
     *
     * @param string $sUser   username to add
     * @param string $sGroup  group to add user to; this group must exist
     * @return bool
     */
    public function userAdd(string $sUser, string $sGroup): bool
    {
        $this->_wd(__METHOD__ . "(user '$sUser', group '$sGroup')");
        if (!$this->_groupExists($sGroup)) {
            $this->_error(__METHOD__ . ": Cannot add user '$sUser' to group '$sGroup', group does not exist.");
            return false;
        }
        if(in_array($sUser, $this->aGroups[$sGroup])) {
            $this->_error(__METHOD__ . ": User '$sUser' is member of group '$sGroup' already.");
            return false;
        }
        $this->aGroups[$sGroup][] = $sUser;
        return $this->_saveFile();
    }

    /**
     * Add a user to an existing group
     * It returns true if successful.
     * It returns false
     * - if group doesn't exist
     * - if the user in the given group doesn't exist
     * - writing .htgroup file failed
     *
     * @param string $sUser   username to delete
     * @param string $sGroup  group name where to delete the user from
     * @return bool
     */
    public function userRemove(string $sUser, string $sGroup): bool
    {
        $this->_wd(__METHOD__ . "(user '$sUser', group '$sGroup')");
        if (!$this->_groupExists($sGroup)) {
            $this->_error(__METHOD__ . ": Cannot add user '$sUser' to group '$sGroup', group does not exist.");
            return false;
        }
        if (($key = array_search($sUser, $this->aGroups[$sGroup])) !== false) {
            $this->_wd(__METHOD__ . " removing key $key");
            unset($this->aGroups[$sGroup][$key]);
        } else {
            $this->_error(__METHOD__ . ": Cannot remove user '$sUser' from group '$sGroup', user is not a member.");
            return false;
        }
        return $this->_saveFile();
    }

}